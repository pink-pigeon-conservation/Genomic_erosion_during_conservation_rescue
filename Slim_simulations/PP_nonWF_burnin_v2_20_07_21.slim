//v2
// add deficit correction
// edit load formula to skip neutral mutations, faster?
// add s coef scale
// corrected Ne ratio
// flycatcher gene props
// gene len 3400
//genes13840
//totalLen_47Mb
// progressive N growth: 100 steps


initialize() {

	if (exists("slimgui")){

		defineConstant("seed", 8875362);

		// prefix of the output file
		defineConstant("outPref_in", "test_PP_truncated_treeSeqBurn");

		defineConstant("Nin", 16000); // target K

		defineConstant("chr_genes_in","CDS_chr_prop_len3400_genes13840_totalLen_47Mb.txt");

		defineConstant("g", 1000); // number of genes
		defineConstant("geneLength", 3400); // gene length
        
	}
	   
   defineConstant("rho_in", 1e-03); //  recombination rate

	defineConstant("del_mut", 1001); // number of deleterious mutation types
	setSeed(seed);
	defineConstant("mu_in", 0); //  mutation rate (zero for burnin)

	defineConstant("scale", 1); //  rate scale (not used, fix to 1)

	defineConstant("Ne_ratio", 8.4);
	defineConstant("mu", mu_in*scale); //  mutation rate
	defineConstant("rho", rho_in*scale); //  recombination rate
	
	// Intilialize
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);
	initializeTreeSeq();
	
	// mutation type, irrelevant as mu=0
	initializeMutationType("m1", 0.5, "f", 0.0);

	// proportion of mutation types given a relative proportion of 1:2.3 pf neutral:deleterious
	initializeGenomicElementType("g1", m1, 1);  // exon

	initializeMutationRate(mu);

	// proportional distribution of genes per chromosome
	genePropsFile=readFile(chr_genes_in);
	gene_props=sapply(genePropsFile[1:(length(genePropsFile)-1)],"asFloat(strsplit(applyValue,'\t')[1]);");
	gene_nums = round(gene_props*g);
	if(sum(gene_nums)<g){DIFF=g-sum(gene_nums);gene_nums[0]=gene_nums[0]+DIFF;}
	if(sum(gene_nums)>g){DIFF=sum(gene_nums)-g;gene_nums[0]=gene_nums[0]-DIFF;}

	for (i in 1:g){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}

	// recombination rates so recombination occurs between genes but  not within genes
	rates=NULL;
	// Multiple chromosomes:
	for (i in 1:(size(gene_nums)-1)){
		rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[size(gene_nums)-1]-1)));

	ends=NULL;
	for (i in 1:g){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=ends[0:(size(ends)-2)];

	initializeRecombinationRate(rates, ends);

	// set seed
	setSeed(asInteger(seed));

	// lenght of chr = last position of rho file
	defineConstant("chromLen", ends[(length(ends)-1)]);
	defineConstant("seqLength", chromLen);

	// intial population size
	defineConstant("K", asInteger(Nin));

	// litter size prob distribution - wild
	defineConstant("prob_litter",c(rep(0,100),rpois(900,4.8))); // revised distribution May 2020
	// litter size prob distribution - captive
	defineConstant("prob_litter_p2",c(rep(0,40),rpois(960,5.8))); // revised distribution May 2020

}

//// Add intial population of age classes 0-15
1 early() {
	//	sim.mutationTypes[sim.mutationTypes.id==mut_neutral].convertToSubstitution=T;
	sim.addSubpop("p1", K);
	sim.tag=K;
	p1.individuals.age = rdunif(K, min=0, max=15);
	defineConstant("initGen", sim.generation);
	p1.tag=K;
	defineConstant("BURN",asInteger(Nin*5));

	sim.rescheduleScriptBlock(s0,BURN,BURN);

	defineConstant("outPref",outPref_in+"_genLen"+geneLength+"_genNo"+g+"_K"+Nin+"_seed"+getSeed());

	// output recombination map used to be later used in pyslim for recapitation
	recRates=sim.chromosome.recombinationRates;
	recPos=sim.chromosome.recombinationEndPositions;
	writeFile(outPref+"_recRates.txt",asString(recRates));
	writeFile(outPref+"_recPos.txt",asString(recPos));


	print("###############"+"\n");
	print("output: "+outPref);
	print("Burn in");print(s0);
	print("###############"+"\n");


}

/// Print progress
1: late() {
	if(sim.generation == 1 | sim.generation % 100 ==0){
		print(date() + "\t" + time() + "\t" + "generation: " + sim.generation + "\t" + "N: " + p1.individualCount+ "  memory usage: "+usage()/1000+"Gb");
	}
}

s0 100000000 late() {
	print("Outoput treeSeq" + "\t" + sim.generation + "\t" + time() + "\t" + date());
	sim.treeSeqOutput(outPref + "_treeSeq_gen"+sim.generation+".tree");
	sim.simulationFinished();
}

//reproduction age restrictions + litter size - monogamous mating
reproduction(p1) {
	// randomize the order of p1.individuals
	parents_age1plus=p1.individuals[p1.individuals.age>=2];
	parents = sample(parents_age1plus, length(parents_age1plus));
	// draw monogamous pairs and generate litters
	if(length(parents)>=4){
		for (i in seq(0, length(parents_age1plus) - 2, by=2))
		{
			parent1 = parents[i];
			parent2 = parents[i + 1];
			litterSize = asInteger(sample(prob_litter,1));
			for (j in 1:litterSize)
			{
				p1.addCrossed(parent1, parent2);
			}
		}
	}
	// disable this callback for this generation
	self.active = 0;
}

//// Fitness scalling regulated with a life table based individual mortality
early() {
	inds = p1.individuals;
	ages = inds.age;
	prob_mort=c(rnorm(1,0.54,0.05),sort(rnorm(12,0.148,0.06)),rnorm(1,0.5,0.05), rnorm(1,0.75,0.05), 1.0);
	prob_mort[prob_mort<0]=0;
	mortality = prob_mort[ages];
	survival = 1 - mortality;
	inds.fitnessScaling = survival;
	// density-dependence, factoring in individual mortality
	p1.fitnessScaling = p1.tag / (p1.individualCount * mean(survival));
}



//Functions

function (s)getNeutHet (o pop, o mut) {

	total = 0.0;

	for (ind in p1.individuals)
	{
		// Calculate the nucleotide heterozygosity of this individual
		muts0 = ind.genomes[0].mutationsOfType(mut);
		muts1 = ind.genomes[1].mutationsOfType(mut);

		// Count the shared mutations
		shared_count = sum(match(muts0, muts1) >= 0);

		// All remaining mutations in the genomes are unshared (i.e. heterozygous)
		unshared_count = muts0.size() + muts1.size() - 2 * shared_count;

		// pi is the mean heterozygosity across the chromosome
		pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
		total = total + pi_ind;
	}

	size = p1.individuals.size();
	pi = total / size;
	out = sim.generation + "\t" + pop.id + "\t" + pi + "\t" +size;
	return out;

}

function (s) getPopSumm(o pop)
{
	mNeutral=sim.mutationTypes[sim.mutationTypes.id==mut_neutral];
	i=pop.individuals;
	indvCount=length(i);
	m = i.uniqueMutations;
	m_uniq = unique(m);
	m_uniq=m_uniq[m_uniq.mutationType!=mNeutral];
	Mutcount=length(m_uniq);
	freqMut=sim.mutationFrequencies(pop,m_uniq);
	ScoefMut=abs(m_uniq.selectionCoeff);
	DcoefMut=m_uniq.mutationType.dominanceCoeff;
	HomRef=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==F&i.genome2.containsMutations(applyValue)==F)/i.size();");
	HomAlt=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==T&i.genome2.containsMutations(applyValue)==T)/i.size();");
	Het1=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==F&i.genome2.containsMutations(applyValue)==T)/i.size();");
	Het2=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==T&i.genome2.containsMutations(applyValue)==F)/i.size();");
	Het=(Het1+Het2);
	mHet=mean(Het);
	mLoad_homo=sum(ScoefMut*HomAlt);
	mLoad_hetero=sum(ScoefMut*DcoefMut*Het);
	mLoad=mLoad_homo+mLoad_hetero;
	totalLoad=sum(freqMut*ScoefMut);
	relzLoad=sum(freqMut^2*ScoefMut)+ (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));
	mskLoad=sum(freqMut*ScoefMut) - sum(freqMut^2*ScoefMut) - (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));

	FROH_total=0;
	for(indv in pop.individuals){
		indm = sortBy(indv.genomes.mutations, "position");
		indm_uniq = unique(indm);
		genotype = sapply(indm_uniq, "sum(indm == applyValue);");
		if (isNULL(genotype)) {
			FROH_total = FROH_total+ 0;
			next;
		}
		ID_het = (genotype == 1); //outputs T/F for genotypes if they are het or homDer
		ID_homDer = (genotype == 2);
		pos_het = indm_uniq.position[ID_het]; //outputs positions of heterozgoys genotypes
		startpos = c(0, pos_het); //adds 0 to beggining of vector of hets
		endpos = c(pos_het, sim.chromosome.lastPosition); //adds last position in genome to vector of hets
		pos_het_diff = endpos - startpos;
		ROHcutoff=1e6; // same for a different ROH cutoff value
		ROH_startpos = startpos[pos_het_diff > ROHcutoff];
		ROH_endpos = endpos[pos_het_diff > ROHcutoff];
		ROH_length = pos_het_diff[pos_het_diff > ROHcutoff];
		ROH_length_sum = sum(ROH_length);
		ROH_out=ROH_length_sum/chromLen;
		FROH_total=FROH_total+ROH_out;
	}
	FROH_mean=FROH_total/pop.individualCount;

	relzLoad_FROH=sum((1-FROH_mean)*freqMut^2*ScoefMut+FROH_mean*freqMut*ScoefMut)+ 2*(1-FROH_mean)*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut);
	mskLoad_FROH= sum(freqMut*ScoefMut) - (sum((1-FROH_mean)*freqMut^2*ScoefMut+FROH_mean*freqMut*ScoefMut)) -  (2*(1-FROH_mean)*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));


	fitness_indv=c();
	for(indv in pop.individuals){
		// Calculate individual fitness
		muts0_m2 = indv.genomes[0].mutationsOfType(m2);
		muts1_m2 = indv.genomes[1].mutationsOfType(m2);
		HOMO_m2=setIntersection(muts0_m2,muts1_m2);
		HETERO_m2=setSymmetricDifference(muts0_m2,muts1_m2);
		if(length(HETERO_m2)>0){fit_hetero=abs(HETERO_m2.selectionCoeff*HETERO_m2.mutationType.dominanceCoeff);}
		if(length(HETERO_m2)==0){fit_hetero=0;}
		fit_homo=HOMO_m2.selectionCoeff;
		if(length(fit_homo)==0){fit_homo=0;}
		indv_fit=sum(1-fit_homo)*sum(1-fit_hetero);
		fitness_indv=c(fitness_indv,indv_fit);
	}

	fitness_cached=pop.cachedFitness(pop.individuals.index);


	out=sim.generation +"\t"+ pop.id +"\t"+ indvCount +"\t"+ Mutcount +"\t"+ sum(HomAlt==1.0)+"\t"+ mHet +"\t"+ mLoad_homo +"\t"+ mLoad_hetero +"\t"+ mLoad +"\t"+ totalLoad +"\t"+ relzLoad +"\t"+ mskLoad +"\t"+ relzLoad_FROH +"\t"+ mskLoad_FROH+"\t"+mean(fitness_indv)+"\t"+sd(fitness_indv)+"\t"+mean(fitness_cached)+"\t"+sd(fitness_cached);
	return(out);
}

function (s) geths(o pop)
{
	i=pop.individuals;
	indvCount=length(i);
	m = i.uniqueMutations;
	m_uniq = unique(m);
	Mutcount=length(m_uniq);
	freqMut=sim.mutationFrequencies(pop,m_uniq);
	ScoefMut=abs(m_uniq.selectionCoeff);
	DcoefMut=m_uniq.mutationType.dominanceCoeff;
	out=sim.generation +"\t"+ pop.id +"\t"+ freqMut+"\t"+ ScoefMut +"\t"+ DcoefMut;
	return(out);
}

function (s) getIndvLoad(o pop, i sampSize)
{
	i2.evaluate(pop);
	target=pop.sampleIndividuals(1);
	pop_indv=i2.drawByStrength(target, sampSize);
	out=c();
	for(indv in pop_indv){
		mut=indv.uniqueMutations;
		if(length(mut)==0){next;}
		index=indv.index;
		age=indv.age;
		mutOrgGen=mut.originGeneration;
		mutOrgPop=mut.subpopID;
		mutS=mut.selectionCoeff;
		mutH=m_uniq.mutationType.dominanceCoeff;
		mutFreq=sim.mutationFrequencies(pop,mut);
		HomRef=sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==F&indv.genome2.containsMutations(applyValue)==F)/indv.size();");
		HomAlt=sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==T&indv.genome2.containsMutations(applyValue)==T)/indv.size();");
		Het=sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==T&indv.genome2.containsMutations(applyValue)==F)/indv.size();")+sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==F&indv.genome2.containsMutations(applyValue)==T)/indv.size();");

		Lmut=length(mut);
		f11=sum(HomAlt)/Lmut;
		sHom=mean(abs(mutS[HomAlt==1]));
		if(isNULL(sHom)){sHom=0;}
		f01=sum(Het)/Lmut;
		shHet=mean(abs(mutS[Het==1])*mutH[Het==1]);
		if(isNULL(shHet)){shHet=0;}
		sHet=mean(abs(mutS[Het==1]));
		if(isNULL(sHet)){sHet=0;}

		relzLoad_f2=Lmut*(f11*sHom+f01*shHet);
		mskLoad_f2=Lmut*f01*((0.5*sHet)-shHet);
		totalLoad_f2=Lmut*(f11*sHom+(0.5*f01)*sHet);

		indv_out=sim.generation +"\t"+ pop.id +"\t"+ index +"\t"+ age +"\t"+ relzLoad_f2 +"\t"+ mskLoad_f2 +"\t"+ totalLoad_f2 +"\t"+ pop.cachedFitness(indv.index);

		out=c(out,indv_out);
	}
	return(out);
}