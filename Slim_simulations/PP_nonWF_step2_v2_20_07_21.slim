initialize() {
	
	if (exists("slimgui"))
	{
		// set seed
		//	defineConstant("seed", 887536488272);
		
		// slim input file output from: PP_nonWF_burnin_tree2FullOutput.py
		defineConstant("slim_in","/Users/nrv690/Dropbox/Hernan_main_dropbox/GENDANGERED/WP1/SLiM/1_pink_pigeon/1_final/0_hs/1_v2_forMS_extinction/1_fullFolder/1_v2_forMS_extinction/0_github/test_run_pyslimParams_gensRun5000_genTime3.3_genOut10_mIDm1000_Glen100099.0_U1.0_rho0.001_neutP0.3_pyslimResults_pi2.68e-03_Nc1017_Ne134_mutated_fullOutput.txt");
		
		// prefix of the output file
		defineConstant("outPref_in", "test_PP_truncated_AFTER_treeSeqBurn");
						
		defineConstant("Nin", 1000); // target K
		
		defineConstant("chr_genes_in","/Users/nrv690/Dropbox/Hernan_main_dropbox/GENDANGERED/WP1/SLiM/flycatcher_genome/CDS_chr_prop_len3400_genes13840_totalLen_47Mb.txt");
		
		defineConstant("geneLength", 3400); // 0-1, 0.5 no dominance
		
		defineConstant("rho_in", 1e-03); //  recombination rate
		
		defineConstant("g", 1000); // number of genes
		
		defineConstant("U", 1.99); // mutations per diploid genome
	
	}
	
   defineConstant("rho_in", 1e-03); //  recombination rate

	defineConstant("del_mut", 1001);
	Glen=geneLength*g; // genomic region simulated
	defineConstant("mu_in", U/(2*Glen)); //  mutation rate	
	
	defineConstant("Ne_ratio", 8.4); // N:Ne ratio obtained as Ne=pi/(4*mu)
	defineConstant("mu", mu_in); //  mutation rate
	defineConstant("rho", rho_in); //  recombination rate
	
	// Intilialize
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);
	
	// defining deleterious mutation types:
	// a very large deleterious DFE distribution is generated
	// the distribution is sampled
	// proportion of each mutation type is calculated given the distributin
	// h is defined given s from formula in Kyriazis et al. (2019) and Henn et al. (2016) 
	m2_gamma=sort(rgamma(1e6,0.05,0.5));
	m2_gamma[0:(1e6*0.05)]=1;
	m2_gamma=m2_gamma*-1;
	m2_gamma[m2_gamma<(-1)]=(-1);
	m2_bins=seq(min(m2_gamma),max(m2_gamma),length=asInteger(del_mut));
	prop=c();
	mtype=c();
	s=c();
	i=0;
	for (i in 0:(length(m2_bins)-2))
	{
		propX=length(m2_gamma[m2_bins[i]<=m2_gamma&m2_bins[i+1]>=m2_gamma])/length(m2_gamma);
		prop=c(prop,propX);
		sX=mean(c(m2_bins[i],m2_bins[i+1]));
		s=c(s,sX);
		mtype=c(mtype,"m"+i);
	}
	s[s<(-1)]=(-1);
	h=(0.5/(1+7071.07*abs(s)));
	prop[prop==0]=min(prop[prop>0]);
	prop_exons=sapply(prop,"(applyValue*2.31)/1;");
	
	// constant for outputs
	defineConstant("out_s",s);
	defineConstant("out_h",h);
	defineConstant("out_prop",prop_exons);
	
	// define mutation types	
	for (i in 0:(length(m2_bins)-2))
	{
		initializeMutationType(i, h[i], "f", asFloat(s[i]));
		print("mut:"+i+" - " + "h:"+h[i]+" - "+ "s:" + asFloat(s[i])+" - "+ "s:" + asFloat(out_prop[i]));
	}
	
	defineConstant("mut_neutral", del_mut-1); //  recombination rate
	initializeMutationType(paste(c("m",asString(del_mut-1)),sep=""), 0.5, "f", 0.0);
		
	// distribution of mutation types
	// proportion of mutation types given a relative proportion of 1:2.3 pf neutral:deleterious
	initializeGenomicElementType("g1", 0:(del_mut-1), c(prop_exons,1.0));  // exon
	
	initializeMutationRate(mu);
	
	
	// proportional distribution of genes per chromosome
	genePropsFile=readFile(chr_genes_in);
	gene_props=sapply(genePropsFile[1:(length(genePropsFile)-1)],"asFloat(strsplit(applyValue,'\t')[1]);");
	gene_nums = round(gene_props*g);
	if(sum(gene_nums)<g){DIFF=g-sum(gene_nums);gene_nums[0]=gene_nums[0]+DIFF;}
	if(sum(gene_nums)>g){DIFF=sum(gene_nums)-g;gene_nums[0]=gene_nums[0]-DIFF;}
	
	for (i in 1:g){
		initializeGenomicElement(g1, ((i-1)*geneLength)+(i-1), (i*geneLength)+(i-2) );
	}
	
	
	// recombination rates so recombination occurs between genes but  not within genes
	rates=NULL;
	
	// Multiple chromosomes:
	for (i in 1:(size(gene_nums)-1)){
		rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[i-1]-1)), 0.5);
	}
	rates=c(rates, 0, rep(c(rho, 0), asInteger(gene_nums[size(gene_nums)-1]-1)));
	
	ends=NULL;
	for (i in 1:g){
		ends=c(ends, (i*geneLength)+(i-2), (i*geneLength)+(i-1));
	}
	ends=ends[0:(size(ends)-2)];
	
	initializeRecombinationRate(rates, ends);
	
	// set seed
	//	setSeed(asInteger(seed));
	
	// lenght of chr = last position of rho file
	defineConstant("chromLen", ends[(length(ends)-1)]);
	defineConstant("seqLength", chromLen);
	
	// intial population size
	defineConstant("K", asInteger(Nin));
	
	// litter size prob distribution - wild
	defineConstant("prob_litter",c(rep(0,100),rpois(900,4.8))); // revised distribution May 2020
	// litter size prob distribution - captive
	defineConstant("prob_litter_p2",c(rep(0,40),rpois(960,5.8))); // revised distribution May 2020
	
}

//// Add intial population of age classes 0-15
1 early() {
	sim.mutationTypes[sim.mutationTypes.id==mut_neutral].convertToSubstitution=T;
	sim.readFromPopulationFile(slim_in);
	sim.tag=K;
	defineConstant("initGen", sim.generation);
	p1.tag=K;
	defineConstant("BURN",asInteger(Nin*2));
	defineConstant("END",asInteger(Nin*8));
	
	sim.rescheduleScriptBlock(s0,BURN,END);
	defineConstant("gen_slimOut",asInteger(Nin*2:7));
	sim.rescheduleScriptBlock(s1,END,END);
	sim.rescheduleScriptBlock(s2,initGen+1,END);
	
	defineConstant("outPref",outPref_in+"_genLen"+geneLength+"_genNo"+g+"_totalLen"+chromLen/1e6+"_Nfinal"+Nin+"_rho"+rho_in+"_mu"+mu_in+"_U"+U+"_seed"+getSeed());
	
	HEAD="gen" +"\t"+ "pop" +"\t"+ "pi" +"\t"+ "N" + "\t" + "K";
	writeFile(outPref + "_NeutPi_all.txt",HEAD,append=F);
	
	HEAD="gen" +"\t"+ "pop" +"\t"+ "freqMut" +"\t"+ "ScoefMut"+"\t"+ "DcoefMut";
	writeFile(outPref + "_hs.txt",HEAD,append=F);
	
	HEAD="gen" +"\t"+ "pop" +"\t"+ "N" +"\t"+ "mutCount" +"\t"+ "mutFixed" +"\t"+ "meanHet" +"\t"+ "loadHomo" +"\t"+ "loadHetero" +"\t"+ "load" +"\t"+ "totalLoad" +"\t"+ "relzLoad" +"\t"+ "mskLoad";
	writeFile(outPref + "_summaryLoad.txt",HEAD,append=F);
	
	recRates=sim.chromosome.recombinationRates;
	recPos=sim.chromosome.recombinationEndPositions;
	writeFile(outPref+"_recRates.txt",asString(recRates));
	writeFile(outPref+"_recPos.txt",asString(recPos));
	
	
	print("###############"+"\n");
	print("output: "+outPref);
	print("Burn in");print(s0);
	print("End");print(s1);
	print("output");print(s2);
	print("###############"+"\n");
	
	out_m400_DFE= out_s +"\t"+ out_h +"\t"+ out_prop;
	writeFile(outPref + "_m400_DFE.txt",out_m400_DFE);
}

/// Print progress
1: late() {
	if(sim.generation == 1 | sim.generation % 100 ==0){
		print(date() + "\t" + time() + "\t" + "generation: " + sim.generation + "\t" + "N: " + p1.individualCount+ "  memory usage: "+usage()/1000+"Gb");
	}
}


s0 100000000 late() {
	if(sum(sim.generation == gen_slimOut)>0){
		print("Outoput full" + "\t" + sim.generation + "\t" + time() + "\t" + date());
		sim.outputFull(outPref + "_afterTreeSeqBurn_gen"+sim.generation+".slim");
	}
}

s1 100000000 late() {
	print("Outoput full" + "\t" + sim.generation + "\t" + time() + "\t" + date());
	sim.outputFull(outPref + "_afterTreeSeqBurn_gen"+sim.generation+".slim");
	sim.simulationFinished();
}


s2 100000000 late() {
	if((sim.generation % asInteger((BURN-initGen)/15) ==0) | (sim.generation % asInteger((END-BURN)/100) ==0)){
		print("Outoput metrics" + "\t" + sim.generation + "\t" + time() + "\t" + date());
		for(pop in sim.subpopulations){
			m=sim.mutationTypes[sim.mutationTypes.id==mut_neutral];
			OUT=getNeutHet(p1,m);
			writeFile(outPref + "_NeutPi_all.txt",OUT,append=T);
			OUT=getPopSumm(p1);
			writeFile(outPref + "_summaryLoad.txt",OUT,append=T);
		}
	}
	
	if((sim.generation % asInteger((BURN-initGen)/2) ==0) | (sim.generation % asInteger((END-BURN)/10) ==0)){
		print("Outoput metrics" + "\t" + sim.generation + "\t" + time() + "\t" + date());
		for(pop in sim.subpopulations){
			OUT=geths(p1);
			writeFile(outPref + "_hs.txt",OUT,append=T);
		}
	}
}


//correction for N swings
// incrteasing load can reduce population size. To simulate a target N the carrying capacity is increased when N is reduced by 20% or more
1: late() {
	currentN=p1.individualCount;
	NminTarget=Nin-(Nin*0.2);
	NmaxTarget=Nin+(Nin*0.2);
	if(currentN<NminTarget){
		print("### DEFICIT!!!!" +"\t"+ sim.generation);
		print("current K="+p1.tag);
		deficit=(NminTarget-currentN)/Nin;
		p1.tag=p1.tag+asInteger(Nin*deficit);
		print("deficit="+deficit +"\t"+ "new K="+p1.tag);
	}
	if(currentN>NmaxTarget){
		print("### SURPLUS!!!!" +"\t"+ sim.generation);
		print("current K="+p1.tag);
		surplus=(currentN-NmaxTarget)/Nin;
		p1.tag=p1.tag-asInteger(Nin*surplus);
		print("surplus="+surplus +"\t"+ "new K="+p1.tag);
	}

}


//reproduction age restrictions + litter size - monogamous mating
reproduction(p1) {
	// randomize the order of p1.individuals
	parents_age1plus=p1.individuals[p1.individuals.age>=2];
	parents = sample(parents_age1plus, length(parents_age1plus));
	// draw monogamous pairs and generate litters
	if(length(parents)>=4){
		for (i in seq(0, length(parents_age1plus) - 2, by=2))
		{
			parent1 = parents[i];
			parent2 = parents[i + 1];
			litterSize = asInteger(sample(prob_litter,1));
			for (j in 1:litterSize)
			{
				p1.addCrossed(parent1, parent2);
			}
		}
	}
	// disable this callback for this generation
	self.active = 0;
}

//// Fitness scalling regulated with a life table based individual mortality
early() {
	inds = p1.individuals;
	ages = inds.age;
	prob_mort=c(rnorm(1,0.54,0.05),sort(rnorm(12,0.148,0.06)),rnorm(1,0.5,0.05), rnorm(1,0.75,0.05), 1.0);
	prob_mort[prob_mort<0]=0;
	mortality = prob_mort[ages];
	survival = 1 - mortality;
	inds.fitnessScaling = survival;
	// density-dependence, factoring in individual mortality
	p1.fitnessScaling = p1.tag / (p1.individualCount * mean(survival));
}



//Functions

function (s)getNeutHet (o pop, o mut) {
	
	total = 0.0;
	
	for (ind in p1.individuals)
	{
		// Calculate the nucleotide heterozygosity of this individual
		muts0 = ind.genomes[0].mutationsOfType(mut);
		muts1 = ind.genomes[1].mutationsOfType(mut);
		
		// Count the shared mutations
		shared_count = sum(match(muts0, muts1) >= 0);
		
		// All remaining mutations in the genomes are unshared (i.e. heterozygous)
		unshared_count = muts0.size() + muts1.size() - 2 * shared_count;
		
		// pi is the mean heterozygosity across the chromosome
		pi_ind = unshared_count / (sim.chromosome.lastPosition + 1);
		total = total + pi_ind;
	}
	
	size = p1.individuals.size();
	pi = total / size;
	out = sim.generation + "\t" + pop.id + "\t" + pi + "\t" +size + "\t" + p1.tag;
	return out;

}

function (s) getPopSumm(o pop)
{
	mNeutral=sim.mutationTypes[sim.mutationTypes.id==mut_neutral];
	i=pop.individuals;
	indvCount=length(i);
	m = i.uniqueMutations;
	m_uniq = unique(m);
	m_uniq=m_uniq[m_uniq.mutationType!=mNeutral];
	Mutcount=length(m_uniq);
	freqMut=sim.mutationFrequencies(pop,m_uniq);
	ScoefMut=abs(m_uniq.selectionCoeff);
	DcoefMut=m_uniq.mutationType.dominanceCoeff;
	HomRef=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==F&i.genome2.containsMutations(applyValue)==F)/i.size();");
	HomAlt=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==T&i.genome2.containsMutations(applyValue)==T)/i.size();");
	Het1=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==F&i.genome2.containsMutations(applyValue)==T)/i.size();");
	Het2=sapply(m_uniq, "sum(i.genome1.containsMutations(applyValue)==T&i.genome2.containsMutations(applyValue)==F)/i.size();");
	Het=(Het1+Het2);
	mHet=mean(Het);
	mLoad_homo=sum(ScoefMut*HomAlt);
	mLoad_hetero=sum(ScoefMut*DcoefMut*Het);
	mLoad=mLoad_homo+mLoad_hetero;
	totalLoad=sum(freqMut*ScoefMut);
	relzLoad=sum(freqMut^2*ScoefMut)+ (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));
	mskLoad=sum(freqMut*ScoefMut) - sum(freqMut^2*ScoefMut) - (2*sum(freqMut*(1-freqMut)*ScoefMut*DcoefMut));	
		
	out=sim.generation +"\t"+ pop.id +"\t"+ indvCount +"\t"+ Mutcount +"\t"+ sum(HomAlt==1.0)+"\t"+ mHet +"\t"+ mLoad_homo +"\t"+ mLoad_hetero +"\t"+ mLoad +"\t"+ totalLoad +"\t"+ relzLoad +"\t"+ mskLoad;
	return(out);
}

function (s) geths(o pop)
{
	i=pop.individuals;
	indvCount=length(i);
	m = i.uniqueMutations;
	m_uniq = unique(m);
	Mutcount=length(m_uniq);
	freqMut=sim.mutationFrequencies(pop,m_uniq);
	ScoefMut=abs(m_uniq.selectionCoeff);
	DcoefMut=m_uniq.mutationType.dominanceCoeff;
	out=sim.generation +"\t"+ pop.id +"\t"+ freqMut+"\t"+ ScoefMut +"\t"+ DcoefMut;
	return(out);
}

function (s) getIndvLoad(o pop, i sampSize)
{
	i2.evaluate(pop);
	target=pop.sampleIndividuals(1);
	pop_indv=i2.drawByStrength(target, sampSize);
	out=c();
	for(indv in pop_indv){
		mut=indv.uniqueMutations;
		if(length(mut)==0){next;}
		index=indv.index;
		age=indv.age;
		mutOrgGen=mut.originGeneration;
		mutOrgPop=mut.subpopID;
		mutS=mut.selectionCoeff;
		mutH=m_uniq.mutationType.dominanceCoeff;
		mutFreq=sim.mutationFrequencies(pop,mut);
		HomRef=sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==F&indv.genome2.containsMutations(applyValue)==F)/indv.size();");
		HomAlt=sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==T&indv.genome2.containsMutations(applyValue)==T)/indv.size();");
		Het=sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==T&indv.genome2.containsMutations(applyValue)==F)/indv.size();")+sapply(mut, "sum(indv.genome1.containsMutations(applyValue)==F&indv.genome2.containsMutations(applyValue)==T)/indv.size();");
		
		Lmut=length(mut);
		f11=sum(HomAlt)/Lmut;
		sHom=mean(abs(mutS[HomAlt==1]));
		if(isNULL(sHom)){sHom=0;}
		f01=sum(Het)/Lmut;
		shHet=mean(abs(mutS[Het==1])*mutH[Het==1]);
		if(isNULL(shHet)){shHet=0;}
		sHet=mean(abs(mutS[Het==1]));
		if(isNULL(sHet)){sHet=0;}
		
		relzLoad_f2=Lmut*(f11*sHom+f01*shHet);
		mskLoad_f2=Lmut*f01*((0.5*sHet)-shHet);
		totalLoad_f2=Lmut*(f11*sHom+(0.5*f01)*sHet);
		
		indv_out=sim.generation +"\t"+ pop.id +"\t"+ index +"\t"+ age +"\t"+ relzLoad_f2 +"\t"+ mskLoad_f2 +"\t"+ totalLoad_f2 +"\t"+ pop.cachedFitness(indv.index);
		
		out=c(out,indv_out);
	}
	return(out);
}
